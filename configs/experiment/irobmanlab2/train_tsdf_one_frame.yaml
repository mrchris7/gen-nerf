# @package _global_

# to execute this experiment run:
# python train.py experiment=train_tsdf_one_frame

defaults:
  - override /data: gpu_one_frame
  - override /model: gen_nerf
  - override /callbacks: default
  - override /logger: null
  - override /trainer: ddp
  - override /paths: cluster

# all parameters below will be merged with parameters from default configurations set above
# this allows you to overwrite only specified parameters

tags: ['dev', 'cluster', 'one_frame', 'only_tsdf']

seed: 0

trainer:
  devices: 1
  num_nodes: 1
  min_epochs: 5
  max_epochs: 5
  log_every_n_steps: 1
  check_val_every_n_epoch: 1
  #gradient_clip_val: 0.5

model:
  optimizer:
    lr: 0.0001
    weight_decay: 0.0001
  scheduler:
    step_size: 300
    gamma: 0.1
  compile: false
  
  encoder:
    use_spatial: true
    spatial:
      backbone: 'resnet34'
      use_first_pool: true
    use_pointnet: false
    pointnet:
      num_sparse_points: 512
      n_blocks: 4
      c_dim: 64
      plane_resolution: 128
      unet_kwargs:
        depth: 3

  mlp:
    d_out_sem: 1
    d_out_geo: 64
    n_blocks: 5
    d_hidden: 256
    combine_layer: 1000
  
  use_code: True
  code:
    num_freqs: 6 
    freq_factor: 0.5
    include_input: True

  tsdf_loss:
    weight: 1.0
    log_transform: True
    log_transform_shift: 15.0
    log_transform_beta: 10.0
    use_smoothness_reg: False
    smoothness_reg:
      weight: 0.1
      k: 3
    use_eikonal_reg: False
    eikonal_reg:
      weight: 0.01

data:
  batch_size_train: 1  # Needs to be divisible by the number of devices
  frame_idx: 5466 # 5466 3567 # 0
  length_train: 30 #75 
  length_val: 10 #20
  length_test: 1 #5
  scene_idx: 0
  voxel_size: .04
  voxel_dim_train: [200, 250, 64] # [160, 160, 64]
  voxel_dim_val: [200, 250, 64] # [256, 256, 96]
  voxel_dim_test: [200, 250, 64] # [416, 416, 128

  # debug:
  random_rotation_3d: false
  random_translation_3d: false
  pad_xy_3d: 0.0
  pad_z_3d: 0.0

logger:
  wandb:
    #name: "train_tsdf_one_frame"
    job_type: "experimental" # train / eval / test / experimental / sweep
    tags: ${tags}
    
    # debug:
    entity: "generalizable-nerfs"