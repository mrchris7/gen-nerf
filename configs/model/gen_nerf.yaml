type: 'GenNerf'

optimizer:
  type: 'Adam'
  lr: 0.001
  weight_decay: 0.0

scheduler:
  type: 'StepLR'
  step_size: 300
  gamma: 0.1

teacher:
  none: none

voxel_size: ${data.voxel_size}
voxel_dim_train: ${data.voxel_dim_train}
voxel_dim_val: ${data.voxel_dim_val}
voxel_dim_test: ${data.voxel_dim_test}

sampling_mode: 'ray'  # 'ray' or 'frustum'
ray:  # follows iSDF
  num_rays: 100
  N: 20
  M: 8
  d_min: 0.07
  delta: 0.1  # dist behind walls # TODO: iSDF uses 0.0 for scannet
  sigma: 0.1
frustum:
  N_free: 384
  N_near: 128
  N_surf: 128
  sigma: 0.1
  d_min: 0.5
  d_max: 4.0

encoder:
  use_spatial: true
  spatial:
    backbone: 'resnet34'  # resnet18, resnet34, resnet50
    pretrained: true
    num_layers: 4 # latent_size = [0, 64, 128, 256, 512, 1024][num_layers]  # initially 4 -> CUDA out of memory
    index_interp: 'bilinear'
    index_padding: 'border'
    upsample_interp: 'bilinear'
    feature_scale: 2.0
    use_first_pool: true
    norm_type: 'batch'
    blur_image: true
    kernel_size: 41
    sigma: 10.0
  use_pointnet: true
  pointnet:  # based on: pointcloud/room_3plane.yaml from conv_onet
    num_sparse_points: 512
    c_dim: 32
    dim: 3
    padding: 0.1
    hidden_dim: 32
    scatter_type: 'max'  # or 'mean'
    plane_type: ['xz', 'xy', 'yz']
    plane_resolution: 128
    n_blocks: 5
    unet: True
    unet_kwargs:
      depth: 5
      merge_mode: concat
      start_filts: 32
    sample_mode: bilinear # bilinear / nearest (for decoding feature-planes)
  plane_merger:  # for pointnet is used
    strategy: 'average'  # 'average' or 'learn'
    alpha: 0.1  # only for 'learn'
  use_auxiliary: false  # whether to additionally encode teacher-features

mlp:
  d_out_sem: 32  # semantic feature
  d_out_geo: 32  # geometric feature -> tsdf
  n_blocks: 5
  d_hidden: 512
  combine_layer: 1000 # prev 3
  combine_type: average
  beta: 0.0
  use_spade: False

use_code: True # positional encoding
code:
  num_freqs: 2 # also good 2 with freqfactor=1.5 
  freq_factor: 0.5 # 1.5
  include_input: True

loss:
  use_tsdf: True
  tsdf:
    weight: 1.0
    transform: 'smooth_log'  # 'log' or 'smooth_log' or 'none'
    shift: 20.0
    smoothness: 8.0  # only for smooth_log

  use_isdf: False
  isdf:  # adapted sdf loss from iSDF
    weight: 1.0
    free_space_factor: 5  # "beta" in the paper
    trunc_weight: 5  # "lambda_surf" in the paper

  use_eikonal: False
  eikonal:
    weight: 0.25
    apply_distance: 0.1

  use_gradient: False
  gradient:  # only for sampling_mode 'frustum'
    weight: 0.02
    
  use_feature: False
  feature:
    weight: 0.1


# compile model for faster training with pytorch 2.0
compile: false